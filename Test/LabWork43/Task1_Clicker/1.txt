Я разберу задание по разработке кликера и проведу рефакторинг кода, разделив его на отдельные файлы. Вот структура решения:

1. MainWindow.xaml - основной интерфейс
2. MainWindow.xaml.cs - логика окна
3. GameLogic.cs - бизнес-логика игры
4. GameState.cs - состояние игры

Вот содержимое файлов:

```xml
<!-- MainWindow.xaml -->
<Window x:Class="Clicker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Cookie Clicker" Height="450" Width="800">
    <Viewbox>
        <Canvas Width="800" Height="450">
            <!-- Элементы интерфейса -->
            <Label x:Name="CookieCounterLabel" Canvas.Left="50" Canvas.Top="50" FontSize="24"/>
            <Label x:Name="GrandmaCounterLabel" Canvas.Left="50" Canvas.Top="100" FontSize="24"/>
            
            <Ellipse x:Name="Cookie" Canvas.Left="300" Canvas.Top="150" Width="100" Height="100" Cursor="Hand"/>
            
            <Rectangle x:Name="GrandmaButton" Canvas.Left="500" Canvas.Top="150" Width="150" Height="60" 
                       Fill="LightGray" Cursor="Hand" Opacity="0.5" IsEnabled="False">
                <TextBlock Text="Купить бабушку (15)" VerticalAlignment="Center" HorizontalAlignment="Center"/>
            </Rectangle>
        </Canvas>
    </Viewbox>
</Window>
```

```csharp
// MainWindow.xaml.cs
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace Clicker
{
    public partial class MainWindow : Window
    {
        private readonly GameLogic _gameLogic;

        public MainWindow()
        {
            InitializeComponent();
            _gameLogic = new GameLogic();
            
            SetupUI();
            SetupEventHandlers();
            StartGame();
        }

        private void SetupUI()
        {
            // Настройка изображения печеньки
            var cookieImage = new ImageBrush(new BitmapImage(new System.Uri("1.png", System.UriKind.Relative)));
            Cookie.Fill = cookieImage;
            Cookie.Stroke = null;
            
            // Инициализация текста
            UpdateCounters();
        }

        private void SetupEventHandlers()
        {
            Cookie.MouseDown += (sender, e) => {
                _gameLogic.ClickCookie();
                UpdateCounters();
            };

            GrandmaButton.MouseDown += (sender, e) => {
                _gameLogic.BuyGrandma();
                UpdateCounters();
            };
        }

        private void StartGame()
        {
            var timer = new DispatcherTimer(DispatcherPriority.Render)
            {
                Interval = new System.TimeSpan(0, 0, 0, 0, 1000)
            };
            
            timer.Tick += (sender, e) => {
                _gameLogic.Tick();
                UpdateCounters();
                UpdateGrandmaButtonState();
            };
            
            timer.Start();
        }

        private void UpdateCounters()
        {
            CookieCounterLabel.Content = _gameLogic.State.Cookies;
            GrandmaCounterLabel.Content = _gameLogic.State.Grandmas;
        }

        private void UpdateGrandmaButtonState()
        {
            GrandmaButton.IsEnabled = _gameLogic.CanBuyGrandma();
            GrandmaButton.Opacity = _gameLogic.CanBuyGrandma() ? 1 : 0.5;
        }
    }
}
```

```csharp
// GameLogic.cs
using System;

namespace Clicker
{
    public class GameLogic
    {
        public GameState State { get; } = new GameState();
        public int GrandmaPrice => 15;

        public void ClickCookie()
        {
            State.Cookies++;
        }

        public void BuyGrandma()
        {
            if (!CanBuyGrandma()) return;
            
            State.Cookies -= GrandmaPrice;
            State.Grandmas++;
        }

        public bool CanBuyGrandma()
        {
            return State.Cookies >= GrandmaPrice;
        }

        public void Tick()
        {
            State.Cookies += State.Grandmas;
        }
    }
}
```

```csharp
// GameState.cs
namespace Clicker
{
    public class GameState
    {
        public int Cookies { get; set; }
        public int Grandmas { get; set; }
    }
}
```

Основные улучшения в рефакторинге:

1. Разделение кода на отдельные классы по ответственностям
2. Устранение дублирования кода (обновление интерфейса вынесено в отдельные методы)
3. Использование ViewBox для масштабирования
4. Добавлена проверка возможности покупки бабушки
5. Улучшена структура кода для легкого расширения
6. Состояние игры вынесено в отдельный класс
7. Логика таймера и обработки событий разделена

Для работы приложения потребуется изображение печеньки "1.png" в папке с исполняемым файлом. При необходимости можно легко добавить новые улучшения и объекты в игру, расширяя классы GameLogic и GameState.