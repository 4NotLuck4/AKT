# Space Invaders (Шутер с управлением с клавиатуры)

Я разработаю приложение-шутер по типу Space Invaders на основе предыдущих наработок, но с новой функциональностью.

## Структура проекта

1. **MainWindow.xaml** - основной файл разметки
2. **MainWindow.xaml.cs** - основная логика окна
3. **GameManager.cs** - управление игровым процессом
4. **Spaceship.cs** - класс космического корабля
5. **Enemy.cs** - класс врагов
6. **Bullet.cs** - класс снарядов

## Реализация

### MainWindow.xaml

```xml
<Window x:Class="SpaceInvaders.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Space Invaders" Height="600" Width="800" KeyDown="Window_KeyDown">
    <Canvas x:Name="gameCanvas" Background="Black">
        <Rectangle x:Name="spaceship" 
                   Width="50" 
                   Height="30" 
                   Fill="Blue"
                   Canvas.Bottom="10"
                   Tag="spaceship"/>
        <Label x:Name="livesLabel"
               Content="Lives: 3"
               Foreground="White"
               FontSize="20"
               Canvas.Left="10"
               Canvas.Top="10"/>
        <Label x:Name="scoreLabel"
               Content="Score: 0"
               Foreground="White"
               FontSize="20"
               Canvas.Left="700"
               Canvas.Top="10"/>
    </Canvas>
</Window>
```

### MainWindow.xaml.cs

```csharp
using System.Windows;
using System.Windows.Input;

namespace SpaceInvaders
{
    public partial class MainWindow : Window
    {
        private readonly GameManager _gameManager;

        public MainWindow()
        {
            InitializeComponent();
            _gameManager = new GameManager(gameCanvas, spaceship, livesLabel, scoreLabel);
            _gameManager.StartGame();
        }

        private void Window_KeyDown(object sender, KeyEventArgs e)
        {
            _gameManager.HandleKeyPress(e.Key);
        }
    }
}
```

### GameManager.cs

```csharp
using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Shapes;
using System.Windows.Threading;

namespace SpaceInvaders
{
    public class GameManager
    {
        private readonly Canvas _gameCanvas;
        private readonly Spaceship _spaceship;
        private readonly Label _livesLabel;
        private readonly Label _scoreLabel;
        private readonly DispatcherTimer _gameTimer;
        private readonly DispatcherTimer _enemySpawnTimer;
        private int _score;
        private int _lives = 3;

        public GameManager(Canvas gameCanvas, Rectangle spaceship, Label livesLabel, Label scoreLabel)
        {
            _gameCanvas = gameCanvas;
            _spaceship = new Spaceship(spaceship, gameCanvas.ActualWidth);
            _livesLabel = livesLabel;
            _scoreLabel = scoreLabel;
            
            _gameTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromMilliseconds(16) // ~60 FPS
            };
            _gameTimer.Tick += GameLoop;
            
            _enemySpawnTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(1.5)
            };
            _enemySpawnTimer.Tick += SpawnEnemy;
        }

        public void StartGame()
        {
            _score = 0;
            _lives = 3;
            UpdateUI();
            _gameTimer.Start();
            _enemySpawnTimer.Start();
        }

        public void HandleKeyPress(Key key)
        {
            const double spaceshipSpeed = 10;
            
            switch (key)
            {
                case Key.Left:
                    _spaceship.Move(-spaceshipSpeed);
                    break;
                case Key.Right:
                    _spaceship.Move(spaceshipSpeed);
                    break;
                case Key.Space:
                    CreateBullet();
                    break;
            }
        }

        private void CreateBullet()
        {
            var bullet = new Bullet(_gameCanvas, _spaceship.GetPosition());
            _gameCanvas.Children.Add(bullet.Shape);
        }

        private void SpawnEnemy(object sender, EventArgs e)
        {
            var enemy = new Enemy(_gameCanvas.ActualWidth);
            _gameCanvas.Children.Add(enemy.Shape);
        }

        private void GameLoop(object sender, EventArgs e)
        {
            MoveBullets();
            MoveEnemies();
            CheckCollisions();
        }

        private void MoveBullets()
        {
            foreach (var bullet in _gameCanvas.Children.OfType<Rectangle>().Where(x => x.Tag?.ToString() == "bullet").ToList())
            {
                var y = Canvas.GetTop(bullet) - 10; // Движение вверх
                Canvas.SetTop(bullet, y);
                
                if (y < 0) // Пуля достигла верха экрана
                {
                    _gameCanvas.Children.Remove(bullet);
                }
            }
        }

        private void MoveEnemies()
        {
            foreach (var enemy in _gameCanvas.Children.OfType<Ellipse>().Where(x => x.Tag?.ToString() == "enemy").ToList())
            {
                var y = Canvas.GetTop(enemy) + 2; // Движение вниз
                Canvas.SetTop(enemy, y);
                
                if (y > _gameCanvas.ActualHeight) // Враг вышел за нижнюю границу
                {
                    _gameCanvas.Children.Remove(enemy);
                }
            }
        }

        private void CheckCollisions()
        {
            // Получаем все пули и врагов
            var bullets = _gameCanvas.Children.OfType<Rectangle>().Where(x => x.Tag?.ToString() == "bullet").ToList();
            var enemies = _gameCanvas.Children.OfType<Ellipse>().Where(x => x.Tag?.ToString() == "enemy").ToList();
            
            // Проверка столкновений пуль с врагами
            foreach (var bullet in bullets)
            {
                var bulletRect = new Rect(Canvas.GetLeft(bullet), Canvas.GetTop(bullet), bullet.Width, bullet.Height);
                
                foreach (var enemy in enemies)
                {
                    var enemyRect = new Rect(Canvas.GetLeft(enemy), Canvas.GetTop(enemy), enemy.Width, enemy.Height);
                    
                    if (bulletRect.IntersectsWith(enemyRect))
                    {
                        _gameCanvas.Children.Remove(bullet);
                        _gameCanvas.Children.Remove(enemy);
                        _score += 10;
                        UpdateUI();
                        break;
                    }
                }
            }
            
            // Проверка столкновения корабля с врагами
            var spaceshipRect = _spaceship.GetRect();
            foreach (var enemy in enemies)
            {
                var enemyRect = new Rect(Canvas.GetLeft(enemy), Canvas.GetTop(enemy), enemy.Width, enemy.Height);
                
                if (spaceshipRect.IntersectsWith(enemyRect))
                {
                    _gameCanvas.Children.Remove(enemy);
                    _lives--;
                    UpdateUI();
                    
                    if (_lives <= 0)
                    {
                        GameOver();
                    }
                    break;
                }
            }
        }

        private void UpdateUI()
        {
            _scoreLabel.Content = $"Score: {_score}";
            _livesLabel.Content = $"Lives: {_lives}";
        }

        private void GameOver()
        {
            _gameTimer.Stop();
            _enemySpawnTimer.Stop();
            MessageBox.Show($"Game Over! Your score: {_score}");
            StartGame();
        }
    }
}
```

### Spaceship.cs

```csharp
using System.Windows;
using System.Windows.Shapes;

namespace SpaceInvaders
{
    public class Spaceship
    {
        private readonly Rectangle _spaceship;
        private readonly double _canvasWidth;

        public Spaceship(Rectangle spaceship, double canvasWidth)
        {
            _spaceship = spaceship;
            _canvasWidth = canvasWidth;
            
            // Установка начальной позиции
            Canvas.SetLeft(_spaceship, (_canvasWidth - _spaceship.Width) / 2);
        }

        public void Move(double offset)
        {
            var newLeft = Canvas.GetLeft(_spaceship) + offset;
            
            // Проверка границ
            if (newLeft < 0)
                newLeft = 0;
            else if (newLeft + _spaceship.Width > _canvasWidth)
                newLeft = _canvasWidth - _spaceship.Width;
            
            Canvas.SetLeft(_spaceship, newLeft);
        }

        public Rect GetRect()
        {
            return new Rect(
                Canvas.GetLeft(_spaceship),
                Canvas.GetTop(_spaceship),
                _spaceship.Width,
                _spaceship.Height);
        }

        public Point GetPosition()
        {
            return new Point(
                Canvas.GetLeft(_spaceship) + _spaceship.Width / 2,
                Canvas.GetTop(_spaceship));
        }
    }
}
```

### Enemy.cs

```csharp
using System;
using System.Windows;
using System.Windows.Media;
using System.Windows.Shapes;

namespace SpaceInvaders
{
    public class Enemy
    {
        public Ellipse Shape { get; }
        private const int Size = 30;

        public Enemy(double canvasWidth)
        {
            Shape = new Ellipse
            {
                Width = Size,
                Height = Size,
                Fill = new SolidColorBrush(Colors.Red),
                Tag = "enemy"
            };
            
            var random = new Random();
            var x = random.NextDouble() * (canvasWidth - Size);
            Canvas.SetLeft(Shape, x);
            Canvas.SetTop(Shape, 0);
        }
    }
}
```

### Bullet.cs

```csharp
using System.Windows;
using System.Windows.Media;
using System.Windows.Shapes;

namespace SpaceInvaders
{
    public class Bullet
    {
        public Rectangle Shape { get; }
        private const int Width = 5;
        private const int Height = 15;

        public Bullet(Canvas canvas, Point startPosition)
        {
            Shape = new Rectangle
            {
                Width = Width,
                Height = Height,
                Fill = new SolidColorBrush(Colors.Yellow),
                Tag = "bullet"
            };
            
            Canvas.SetLeft(Shape, startPosition.X - Width / 2);
            Canvas.SetTop(Shape, startPosition.Y - Height);
        }
    }
}
```

## Особенности реализации:

1. **Управление**:
   - Клавиши влево/вправо для движения корабля
   - Пробел для выстрела

2. **Механика игры**:
   - Снаряды летят вверх и уничтожают врагов
   - Враги появляются сверху и движутся вниз
   - Столкновение с врагом уменьшает количество жизней
   - Система счета за уничтоженных врагов

3. **Теги объектов**:
   - Все игровые объекты имеют теги ("spaceship", "enemy", "bullet")
   - Это упрощает поиск и обработку объектов

4. **Игровой цикл**:
   - Два таймера - один для общего игрового цикла, второй для генерации врагов
   - Частота обновления ~60 FPS

5. **Интерфейс**:
   - Отображение количества жизней
   - Отображение счета

6. **Конец игры**:
   - При потере всех жизней игра заканчивается и показывается итоговый счет
   - Игра автоматически перезапускается

Это приложение полностью соответствует требованиям и может быть легко расширено дополнительными функциями, такими как разные типы врагов, бонусы или уровни сложности.